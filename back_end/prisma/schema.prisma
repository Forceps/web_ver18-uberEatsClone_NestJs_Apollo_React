generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model restaurant {
  id                            Int       @id @default(autoincrement())
  createdAt                     DateTime?
  updatedAt                     DateTime?
  name                          String
  coverImg                      String?
  address                       String
  category                      Int?
  owner                         Int
  category_categoryTorestaurant category? @relation(fields: [category], references: [id])
  user                          user      @relation(fields: [owner], references: [id])
  dish                          dish[]
  order                         order[]

  @@index([category], name: "RestaurantCategory_idx")
  @@index([owner], name: "RestaurantOwner_idx")
}

model user {
  id                         Int           @id @default(autoincrement())
  createdAt                  DateTime?
  updateAt                   DateTime?
  email                      String        @unique
  verified                   Int           @default(0)
  password                   String
  role                       user_role     @default(client)
  order_order_customerTouser order[]       @relation("order_customerTouser")
  order_order_driverTouser   order[]       @relation("order_driverTouser")
  restaurant                 restaurant[]
  verification               verification?
}

model verification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime?
  updatedAt DateTime?
  code      String
  userId    Int       @unique
  user      user      @relation(fields: [userId], references: [id])
}

model category {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime?
  updatedAt  DateTime?
  name       String       @unique
  coverImg   String?
  slug       String       @unique
  restaurant restaurant[]
}

model dish {
  id                          Int          @id @default(autoincrement())
  createdAt                   DateTime?
  updatedAt                   DateTime?
  name                        String
  price                       Int
  photo                       String?
  description                 String
  restaurant                  Int
  options                     Json?
  restaurant_dishTorestaurant restaurant   @relation(fields: [restaurant], references: [id])
  order_item                  order_item[]

  @@index([restaurant], name: "menu_idx")
}

model order {
  id                           Int                    @id @default(autoincrement())
  createdAt                    DateTime?
  updatedAt                    DateTime?
  customer                     Int?
  driver                       Int?
  restaurant                   Int?
  total                        Float
  role                         order_role
  user_order_customerTouser    user?                  @relation("order_customerTouser", fields: [customer], references: [id])
  user_order_driverTouser      user?                  @relation("order_driverTouser", fields: [driver], references: [id])
  restaurant_orderTorestaurant restaurant?            @relation(fields: [restaurant], references: [id])
  m2m_order_item_order         m2m_order_item_order[]

  @@index([customer], name: "customer_idx")
  @@index([driver], name: "driver_idx")
  @@index([restaurant], name: "targetRestaurant_idx")
}

model m2m_order_item_order {
  id                                          Int         @id @default(autoincrement())
  order_item                                  Int?        @map("order-item")
  order                                       Int
  order_m2m_order_item_orderToorder           order       @relation(fields: [order], references: [id])
  order_item_m2m_order_item_orderToorder_item order_item? @relation(fields: [order_item], references: [id])

  @@index([order], name: "M2M_order_idx")
  @@index([order_item], name: "m2m_order-item_idx")
  @@map("m2m_order-item_order")
}

model order_item {
  id                    Int                    @id @default(autoincrement())
  dish                  Int?
  options               Json?
  dish_dishToorder_item dish?                  @relation(fields: [dish], references: [id])
  m2m_order_item_order  m2m_order_item_order[]

  @@index([dish], name: "dishKinds_idx")
  @@map("order-item")
}

enum user_role {
  client
  owner
  delivery
}

enum order_role {
  pending
  cooking
  pickedUp
  delivered
}
